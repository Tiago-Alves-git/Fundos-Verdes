import { AppBar, Avatar, Box, Card, IconButton, InputAdornment, TextField, Typography } from '@mui/material';
import React, { useState } from 'react'
import { useParams } from 'react-router-dom';
import SendIcon from '@mui/icons-material/Send';
import MenuAppBar from '../Components/Header';




const Conversa = () => {


  const mensagens = [
    {
      id: 35,
      talk_id: 1,
      owner: 1,
      body: `Do you have a suggestion for a good present for John on his work anniversary. I am really confused & would love your thoughts on it`,
    },
    {
      id: 2,
      talk_id: 1,
      body: `Do you have a suggestion for a good present for John on his work
        anniversary. I am really confused & would love your thoughts on it.`,
      owner: 2,
    },
    {
      id: 3,
      talk_id: 1,
      body: 'I am try out this new BBQ recipe, I think this might be amazing',
      owner: 1,
    },
    {
      id: 4,
      talk_id: 1,
      body: 'I have the tickets to the ReactConf for this year.',
      owner: 2,
    },
    {
      id: 5,
      talk_id: 1,
      body: 'My appointment for the doctor was rescheduled for next Saturday.',
      owner: 1,
    },
    {
      id: 6,
      talk_id: 1,
      body: `Menus that are generated by the bottom app bar (such as a bottom
        navigation drawer or overflow menu) open as bottom sheets at a higher elevation
        than the bar.`,
      owner: 2,
    },
    {
      id: 7,
      talk_id: 1,
      body: `Who wants to have a cookout this weekend? I just got some furniture
        for my backyard and would love to fire up the grill.`,
      owner: 1,
    },
  ];

  let { id } = useParams();

  const [InitialMensagens, setMensagens] = useState(mensagens);
  const [onChangeMessage, setOnChange] = useState('');


  const mensagensDaConversa = InitialMensagens.filter((msg) => msg.talk_id === parseInt(id));

  const onChange = (e) => {
    const { value } = e.target;
    setOnChange(value);
  }

  
  const newArray = (evt) => {
    const { value } = evt.target;

    const newId = InitialMensagens.length > 0 ? Math.max(InitialMensagens.map(msg => msg.id)) + 1 : 1;
    console.log(evt);
    const newMessage = {
      id: newId,
      talk_id: 1,
      owner: 1,
      body: value,
    };

    setMensagens([...InitialMensagens, newMessage]);
    setOnChange('');
  }

  return (
    <Box sx={{ width: '100%', margin: '0' }}>
    <MenuAppBar />
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        padding: '1em',
        height: '100vh', // Ensures the content takes the full height of the viewport
        boxSizing: 'border-box'
      }}
      >
      <Box
        sx={{
          width: '100%',
          maxWidth: '600px', // Limits the maximum width of the chat
          display: 'flex',
          flexDirection: 'column',
          flexGrow: 1, // Allows the chat to grow and take available space
          overflowY: 'auto', // Adds scroll to the chat content if it overflows
          marginBottom: '100px'
        }}
        >
        {mensagensDaConversa.map((msg) => {
          const isOwner = msg.owner === 1;
          return (
            <Card
            key={msg.id}
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignSelf: isOwner ? 'flex-end' : 'flex-start',
              margin: '1em',
              padding: '20px', // Adjust padding as needed
              backgroundColor: isOwner ? '#C2FBEF' : 'transparent',
              maxWidth: '75%', // Ensure cards do not take full width
              marginLeft: !isOwner ? 'auto' : '0',
              marginRight: isOwner ? 'auto' : '0',
              overflow: 'visible'
            }}
            >
              {!isOwner && <Avatar />}
              <Typography sx={{ fontSize: '0.9em', color: 'gray' }}>
                {msg.body}
              </Typography>
            </Card>
          );
        })}
      </Box>
      <AppBar
        position="fixed"
        sx={{
          top: 'auto',
          bottom: 0,
          display: 'flex',
          justifyContent: 'center',
          paddingLeft: '1.25rem',
          paddingRight: '1.25rem',
        }}
        color='default'
      >
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            width: '100%',
          }}
          >
          <TextField
            id="outlined-basic"
            label="Digite sua pergunta..."
            variant="standard"
            sx={{ width: '100%', maxWidth: '600px', paddingBottom: '10px' }} // Max-width to control the input field width
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton onClick={(e) => {newArray(e)}}>
                    <SendIcon />
                  </IconButton>
                </InputAdornment>
              ),
            }}
            value={onChangeMessage}
            onChange={(e) => { onChange(e) }}
            // enter={(e)=> {newArray(e)}}
            />
        </Box>
      </AppBar>
    </Box>
    </Box>
  )
}

export default Conversa